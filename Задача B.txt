#include <iostream>
#include <vector>
#include <queue>

using namespace std;

enum Color {
    WHITE,
    GRAY
};

class IGraph {  //Интерфейс графа
public:
    virtual ~IGraph() {}    //Виртуальный деструктор чтобы при удалении по указателю не было утечки памяти

    //Добавить ребро выходящее из вершины from и ведущее в вершину to
    virtual void AddEdge(int from, int to) = 0;   //чисто виртуальная функция (не имеет реализации в этом классе

    //получить кол-во вершин в графе
    virtual int VerticesCount() const  = 0;

    //Получить вектор всех вершин в которые можно попасть по ребру из вершины vertex
    virtual std::vector<int> GetVertices(int vertex) const = 0;
};

class MatrixGraph : public IGraph {
public:
    //Конструктор принимает кол-во вершин в графе
    MatrixGraph(int verticesCount) : vertices(verticesCount){
    }

    void AddEdge(int from, int to) override {
        vertices[from].push_back(to);
        vertices[to].push_back(from);
        //Если бы граф был неориентированным то также было бы vertices.at(to).at(from) = true;
    }

    int VerticesCount() const override {
        return vertices.size();
    }

    //Внимание! эта функция работает за линейное от кол-ва вершин время
    std::vector<int> GetVertices(int vertex) const override {
        return vertices[vertex];
    }

private:
    std::vector<std::vector<int>> vertices;   //Матрицу будем хранить в виде вектора векторов, кол-во столбцов равео кол-ву строк  равно  кол-ву вершин
};

class Check{
public:
    int length = 0;
    Color color = WHITE;
};

void dfs(const IGraph* const graph, size_t vertex, std::vector<Check>& checking, int  &min) {

    queue<size_t> findVertexs;
    findVertexs.push(vertex);
    while(!findVertexs.empty())
    {
        size_t vertex = findVertexs.front();
        findVertexs.pop();
        for(auto nextVertex : graph->GetVertices(vertex)) {
            if(checking[nextVertex].color == WHITE) {
                checking[nextVertex].color = GRAY;
                checking[nextVertex].length = checking[vertex].length + 1;
                findVertexs.push(nextVertex);
            }
            else if(checking[nextVertex].length == checking[vertex].length)
            {
                min = checking[vertex].length*2 + 1;
                return;
            }
            else if(checking[nextVertex].length == checking[vertex].length +1)
            {
                min = checking[nextVertex].length*2 ;
                return;
            }
        }
    }
}

int maxDev(const IGraph* const graph, size_t top) {
    auto verticesColors = std::vector<Check>(graph->VerticesCount());

    verticesColors[top].color = GRAY;

    int minLength = 100000;
    dfs(graph, top , verticesColors, minLength);
    return minLength;
}

int main()
{
    size_t tops, numEdges;
    std::cin>>tops >> numEdges;
    MatrixGraph graph(tops);
    for (int i = 0; i < numEdges; i++){
        size_t top1, top2;
        cin >> top1 >> top2;
        graph.AddEdge(top1, top2);
    }
    int minLength = 100000;
    for (size_t i = 0; i < graph.VerticesCount(); ++i)
       minLength = std::min(minLength, maxDev(&graph, i));

    std::cout << (minLength == 100000 ? -1 : minLength);
}
