#include <iostream>
#include <vector>
#include <queue>

using namespace std;

enum Color {
    WHITE,
    GRAY,
    BLACK
};

class IGraph {  //Интерфейс графа
public:
    virtual ~IGraph() {}    //Виртуальный деструктор чтобы при удалении по указателю не было утечки памяти

    //Добавить ребро выходящее из вершины from и ведущее в вершину to
    virtual void AddEdge(int from, int to) = 0;   //чисто виртуальная функция (не имеет реализации в этом классе

    //получить кол-во вершин в графе
    virtual int VerticesCount() const  = 0;

    //Получить вектор всех вершин в которые можно попасть по ребру из вершины vertex
    virtual std::vector<int> GetVertices(int vertex) const = 0;
};

class MatrixGraph : public IGraph {
public:
    //Конструктор принимает кол-во вершин в графе
    MatrixGraph(int verticesCount) : vertices(verticesCount){
    }

    void AddEdge(int from, int to) override {
        vertices[from].push_back(to);
        //Если бы граф был неориентированным то также было бы vertices.at(to).at(from) = true;
    }

    int VerticesCount() const override {
        return vertices.size();
    }

    //Внимание! эта функция работает за линейное от кол-ва вершин время
    std::vector<int> GetVertices(int vertex) const override {
        return vertices[vertex];
    }

private:
    std::vector<std::vector<int>> vertices;   //Матрицу будем хранить в виде вектора векторов, кол-во столбцов равео кол-ву строк  равно  кол-ву вершин
};


void dfs1(const IGraph* const graph, size_t vertex, std::vector<Color>& colors, vector<int> &findVertexs) {
    colors[vertex] = GRAY;

    for(auto nextVertex : graph->GetVertices(vertex)) {
        if(colors[nextVertex] == WHITE)
            dfs1(graph, nextVertex, colors, findVertexs);
    }
    findVertexs.push_back(vertex);
}

void dfs2(const IGraph* const graph, size_t vertex, std::vector<Color>& colors, vector<int> &findVertexs) {
    colors[vertex] = GRAY;
    findVertexs.push_back(vertex);
    for(auto nextVertex : graph->GetVertices(vertex)) {
        if(colors[nextVertex] == WHITE)
            dfs2(graph, nextVertex, colors, findVertexs);
    }
}

void findCompents(const IGraph* const graph, const IGraph* const graphRev, vector< vector<int> > &allComponents ) {
    auto verticesColors = std::vector<Color>(graph->VerticesCount(), WHITE);    //Задаём вектор цветов, индекс - номер вершины
    vector<int> findVertexs;

    for ( int i = 0; i < verticesColors.size(); i++){
        if (verticesColors[i] == WHITE){
            dfs1(graphRev, i , verticesColors, findVertexs);
        }
    }


    verticesColors = std::vector<Color>(graph->VerticesCount(), WHITE);
    vector<int> component;

    for(int i = findVertexs.size()-1; i>=0; i-- )
    {
        if (verticesColors[findVertexs[i]] == WHITE){
            dfs2(graph, findVertexs[i] , verticesColors, component);
            allComponents.push_back(component);
            component.clear();
        }
    }

}

int numNeedEdge(const IGraph* const graph, const IGraph* const graphRevers ) {

    int stock = 0;
    int noStock = 0;
    vector< vector<int> > allComponents;
    findCompents(graph, graphRevers, allComponents);

    vector<int> ratioComp(graph->VerticesCount());

    for( int i = 0; i < allComponents.size(); i++ ){
        for( int j : allComponents[i] ) {
            ratioComp[j] = i;
        }
    }

    if( allComponents.size() == 1 ) return 0;

    for( int comp = 0; comp < allComponents.size(); comp++ ) {
        bool flagEdge = true;
        for( int vert : allComponents[comp] ) {
            for( int child : graph->GetVertices(vert) ) {
                if( ratioComp[child] != comp ) {
                    flagEdge = false;
                }
            }
        }
        if( flagEdge ) {
            stock++;
        }
    }

    for( int comp = 0; comp < allComponents.size(); comp++ ) {
        bool flagEdge = true;
        for( int vert : allComponents[comp] ) {
            for( int child : graphRevers->GetVertices(vert) ) {
                if( ratioComp[child] != comp ) {
                    flagEdge = false;
                }
            }
        }
        if( flagEdge ) {
            noStock++;
        }
    }

    return max(stock, noStock);

}

int main()
{
    int tops, numEdges;
    std::cin>>tops >> numEdges;
    MatrixGraph graph(tops);
    MatrixGraph graphReverset(tops);
    for (int i = 0; i < numEdges; i++){
        int top1, top2;
        cin >> top1 >> top2;
        graph.AddEdge(top1-1, top2-1);
        graphReverset.AddEdge(top2-1, top1-1);
    }

    
    cout<<numNeedEdge(&graph, &graphReverset);


}
