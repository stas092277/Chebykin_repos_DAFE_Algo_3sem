#include <iostream>
#include <vector>

using namespace std;

enum Color {
    WHITE,
    GRAY,
    BLACK
};

class IGraph {  //Интерфейс графа
public:
    virtual ~IGraph() {}    //Виртуальный деструктор чтобы при удалении по указателю не было утечки памяти

    //Добавить ребро выходящее из вершины from и ведущее в вершину to
    virtual void AddEdge(size_t from, size_t to) = 0;   //чисто виртуальная функция (не имеет реализации в этом классе

    //получить кол-во вершин в графе
    virtual size_t VerticesCount() const  = 0;

    //Получить вектор всех вершин в которые можно попасть по ребру из вершины vertex
    virtual std::vector<size_t> GetVertices(size_t vertex) const = 0;
};

class MatrixGraph : public IGraph {
public:
    //Конструктор принимает кол-во вершин в графе
    MatrixGraph(size_t verticesCount) : vertices(verticesCount, std::vector<bool>(verticesCount, false)) { //задаём матрицу verticesCount x verticesCount заполненую false
    }

    void AddEdge(size_t from, size_t to) override {
        vertices.at(from).at(to) = true;
        vertices.at(to).at(from) = true;
        //Если бы граф был неориентированным то также было бы vertices.at(to).at(from) = true;
    }

    size_t VerticesCount() const override {
        return vertices.size();
    }

    //Внимание! эта функция работает за линейное от кол-ва вершин время
    std::vector<size_t> GetVertices(size_t vertex) const override {
        std::vector<size_t> result;
        for(size_t i = 0, n = vertices.size(); i < n; ++i) {
            if(vertices.at(vertex)[i]) {    //если в нашей матрице на позиции (vertex, i) стоит true то из vertex по ребру можно попасть в i
                result.push_back(i);        //добавляем i в результат. Амартизированное время работы будет константным
            }
        }
        return result;
    }

private:
    std::vector<std::vector<bool>> vertices;   //Матрицу будем хранить в виде вектора векторов, кол-во столбцов равео кол-ву строк  равно  кол-ву вершин
};


void dfs(const IGraph* const graph, size_t vertex, std::vector<Color>& colors, bool &flag) {
    for(auto nextVertex : graph->GetVertices(vertex)) { //Перебираем все вершины в которые можно попасть по ребру из данной
        if(colors[nextVertex] == GRAY) {
            switch (colors[vertex]) {
            case WHITE:
                colors[nextVertex] = BLACK;
                break;
            case BLACK:
                colors[nextVertex] = WHITE;
                break;
            case GRAY:
            throw "nod_view error";
            }
            dfs(graph, nextVertex , colors, flag);
        }
        else if (colors[nextVertex]  == colors[vertex])
            flag = false ;
    }
}


bool isDvodol(const IGraph* const graph) {
    auto verticesColors = std::vector<Color>(graph->VerticesCount(), GRAY);    
    
    for ( auto i = 0; i < verticesColors.size(); i++){
        if (verticesColors[i] == GRAY){
            verticesColors[i] = WHITE;

            dfs(graph, i , verticesColors, flag);
        }
    }
    return flag;
}

int main()
{
    size_t tops, numEdges;
    std::cin>>tops >> numEdges;
    MatrixGraph graph(tops);
    for (int i = 0; i < numEdges; i++){
        size_t top1, top2;
        cin >> top1 >> top2;
        graph.AddEdge(top1, top2);
    }
    if(isDvodol(&graph))
        std::cout<<"YES";
    else
        std::cout<<"NO";

}
